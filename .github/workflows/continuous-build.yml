name: Continuous Build

# Trigger on pushes or pull requests to the master branch, but not for documentation-only updates.
on:
  push:
    branches:
      - master
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches:
      - master
    paths-ignore:
      - '**/*.md'
jobs:
  build-server:
    name: Build Server
    runs-on: ${{ matrix.os }}
    outputs:
      matrix: ${{ steps.set-docker-matrix.outputs.matrix }}
    strategy:
      matrix:
        include:
          - name: ubuntu
            os: ubuntu-20.04 # aka focal, because this is what we use in Travis
          - name: macos
            os: macos-latest
          - name: windows
            os: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 10
      # Remove apt repos that are known to break from time to time.
      # See https://github.com/actions/virtual-environments/issues/323
      - name: Remove broken apt repos [Ubuntu]
        if: matrix.name == 'ubuntu'
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
      # Setup latest JDK. We do this to ensure users don't need to use the same version as our
      # release process. Release uses JDK 11, the last version that can target 1.6 bytecode.
      - name: Setup java
        uses: actions/setup-java@v1
        with:
          java-version: 15
      - name: Cache NPM Packages
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: npm-packages-${{ runner.os }}-${{ hashFiles('zipkin-lens/package-lock.json') }}
      - name: Cache Maven Modules
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: m2-repository-${{ hashFiles('**/pom.xml') }}
      - name: Execute Server Build
        # Skips tests and license to run faster and allow shallow clones
        run: ./mvnw -T1C -q --batch-mode -DskipTests -Dlicense.skip=true --also-make -pl zipkin-server clean package
        shell: bash
        env:
          CI: true
      - name: Generate outputs.matrix for Docker build targets [Ubuntu]
        id: set-docker-matrix
        if: matrix.name == 'ubuntu'
        run: echo "::set-output name=matrix::{\"include\":$(.github/workflows/docker/targets-as-json)}"
      - name: Upload to Docker Build step [Ubuntu]
        uses: actions/upload-artifact@v2
        if: matrix.name == 'ubuntu'
        with:
          name: zipkin-server-jars
          if-no-files-found: error
          path: |
            zipkin-server/target/zipkin-server-*-exec.jar
            zipkin-server/target/zipkin-server-*-slim.jar
  build-and-verify-docker:
    name: Build and verify Docker images
    needs: build-server
    runs-on: ubuntu-20.04 # aka focal, because this is what we use in Travis
    strategy:
      matrix: ${{ fromJson(needs.build-server.outputs.matrix) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/download-artifact@v2
        with:
          name: zipkin-server-jars
          path: zipkin-server/target/
      - name: Build Docker image openzipkin/${{ matrix.target }}:test
        run:  RELEASE_FROM_MAVEN_BUILD=true docker/build_image openzipkin/${{ matrix.target }}:test
      - name: Verify Docker image openzipkin/${{ matrix.target }}:test
        run: |
          # This just makes sure containers run and the HEALTHCHECK works (for now..)
          COMPOSE_FILE=./.github/workflows/docker/docker-compose-${{ matrix.target }}.yml
          if test -f "${COMPOSE_FILE}"; then
            docker-compose -f "${COMPOSE_FILE}" up -d --quiet-pull
          else
            docker run --name sut -d openzipkin/${{ matrix.target }}:test
          fi
          docker/bin/block_on_health sut || (docker logs sut && exit 1)
